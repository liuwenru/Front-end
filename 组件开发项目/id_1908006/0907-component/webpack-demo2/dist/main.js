/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./script.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./Gesture.js":
/*!********************!*\
  !*** ./Gesture.js ***!
  \********************/
/*! exports provided: enableGesture */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"enableGesture\", function() { return enableGesture; });\nfunction enableGesture(main) {\n  /*\n  let [x, y] = [0, 0];\n   main.addEventListener(\"pan\", event => {\n      console.log(event.dx, event.dy);\n      main.style.transform = `translate(${event.dx + x}px, ${event.dy + y}px)`;\n  });\n    main.addEventListener(\"panend\", event => {\n      x = x + event.dx; // 结束后，固定到拖拽后的结束位置\n      y = y + event.dy;\n  });\n   main.addEventListener(\"pancancel\", event => {\n      console.log(\"cancel\");\n      main.style.transform = `translate(${x}px, ${y}px)`;\n  })\n  */\n  var contexts = Object.create(null);\n\n  var start = function start(point, context) {\n    console.log(\"start\", point.clientX, point.clientY);\n    context.startX = point.clientX;\n    context.startY = point.clientY;\n    context.isTap = true;\n    context.isPan = false; // for flick\n\n    context.startTime = Date.now();\n    context.isVertical = false;\n    context.isHorizontal = false;\n    context.isPress = false;\n    context.pressHandler = setTimeout(function () {\n      context.isPress = true;\n      context.isTap = false; // 主要就是为了区分press和tap, tap不能触发\n\n      var e = new Event(\"pressstart\");\n      main.dispatchEvent(e);\n      context.pressHandler = null;\n    }, 500);\n  };\n\n  var move = function move(point, context) {\n    console.log(\"move\", point.clientX, point.clientY);\n    var dx = point.clientX - context.startX;\n    var dy = point.clientY - context.startY;\n\n    if (dx * dx + dy * dy > 10 * 10) {\n      // move 了就不是press了\n      if (context.pressHandler !== null) {\n        clearTimeout(context.pressHandler); // 清除定时器，一次性的事情\n\n        context.pressHandler = null;\n        context.isPress = false;\n      } else if (context.isPress) {\n        context.isPress = false;\n        var e = new Event(\"presscancel\");\n        main.dispatchEvent(e);\n      }\n\n      context.isTap = false;\n\n      if (context.isPan == false) {\n        if (Math.abs(dx) > Math.abs(dy)) {\n          // 说明水平移动的分量 大于 垂直移动的分量\n          context.isVertical = false;\n          context.isHorizontal = true;\n        } else {\n          context.isVertical = true;\n          context.isHorizontal = false;\n        }\n\n        context.isPan = true;\n\n        var _e = new Event(\"panstart\"); // 事件定义\n\n\n        _e.startX = context.startX;\n        _e.startY = context.startY;\n        main.dispatchEvent(_e); // 事件分发，在外部listener后，进行处理, 这样可以使得库和业务分离。 业务上监听这个事件即可\n      }\n    }\n\n    if (context.isPan) {\n      var _e2 = new Event(\"pan\");\n\n      _e2.dx = dx;\n      _e2.dy = dy;\n      _e2.isHorizontal = context.isHorizontal;\n      _e2.isVertical = context.isVertical;\n      main.dispatchEvent(_e2);\n    }\n  };\n\n  var end = function end(point, context) {\n    console.log(\"end \", point.clientX, point.clientY);\n\n    if (context.isPress) {\n      var e = new Event(\"pressend\");\n      main.dispatchEvent(e);\n    }\n\n    if (context.isTap) {\n      var _e3 = new Event(\"tap\");\n\n      main.dispatchEvent(_e3);\n    }\n\n    var dx = point.clientX - context.startX,\n        dy = point.clientY - context.startY; // 在PAN 结束的时候，判断一下移动的速率，如果够快，比如0.3 ，则认为要flick\n\n    var v = Math.sqrt(dx * dx + dy * dy) / (Date.now() - context.startTime);\n\n    if (context.isPan && v > 0.3) {\n      // 这个0.3 是个经验值，且最好根据不同的屏幕要有修改\n      console.log(\"isFlick\");\n      context.isFlick = true;\n\n      var _e4 = new Event(\"flick\");\n\n      _e4.dx = dx;\n      _e4.dy = dy;\n      main.dispatchEvent(_e4);\n    } else {\n      context.isFlick = false;\n    }\n\n    if (context.isPan) {\n      var _e5 = new Event(\"panend\"); // 结束后，把当前的座标，作为事件的dx和dy\n\n\n      _e5.dx = dx;\n      _e5.dy = dy;\n      _e5.isFlick = context.isFlick;\n      _e5.isVertical = context.isVertical;\n      _e5.isHorizontal = context.isHorizontal;\n      main.dispatchEvent(_e5);\n    }\n  };\n\n  var cancel = function cancel(point, context) {\n    if (context.isPress) {\n      var e = new Event(\"presscancel\");\n      main.dispatchEvent(e);\n    }\n\n    if (context.isPan) {\n      var _e6 = new Event(\"pancancel\");\n\n      main.dispatchEvent(_e6);\n    }\n  }; // mouse\n\n\n  var mouseSymbol = Symbol(\"mouse\");\n\n  var mousedown = function mousedown(event) {\n    main.addEventListener(\"mousemove\", mousemove);\n    main.addEventListener(\"mouseup\", mouseup);\n    contexts[mouseSymbol] = Object.create(null);\n    start(event, contexts[mouseSymbol]);\n  };\n\n  var mousemove = function mousemove(event) {\n    move(event, contexts[mouseSymbol]);\n  };\n\n  var mouseup = function mouseup(event) {\n    main.removeEventListener(\"mousemove\", mousemove);\n    main.removeEventListener(\"mouseup\", mouseup);\n    end(event, contexts[mouseSymbol]);\n    delete contexts[mouseSymbol];\n  };\n\n  main.addEventListener(\"mousedown\", mousedown); // touch\n\n  var touchstart = function touchstart(event) {\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = event.changedTouches[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var touch = _step.value;\n        contexts[event.identifier] = Object.create(null);\n        start(touch, contexts[event.identifier]);\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n          _iterator[\"return\"]();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  };\n\n  var touchmove = function touchmove(event) {\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n    var _iteratorError2 = undefined;\n\n    try {\n      for (var _iterator2 = event.changedTouches[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n        var touch = _step2.value;\n        move(touch, contexts[event.identifier]);\n      }\n    } catch (err) {\n      _didIteratorError2 = true;\n      _iteratorError2 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion2 && _iterator2[\"return\"] != null) {\n          _iterator2[\"return\"]();\n        }\n      } finally {\n        if (_didIteratorError2) {\n          throw _iteratorError2;\n        }\n      }\n    }\n  };\n\n  var touchend = function touchend(event) {\n    var _iteratorNormalCompletion3 = true;\n    var _didIteratorError3 = false;\n    var _iteratorError3 = undefined;\n\n    try {\n      for (var _iterator3 = event.changedTouches[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n        var touch = _step3.value;\n        end(touch, contexts[event.identifier]);\n        delete contexts[event.identifier];\n      }\n    } catch (err) {\n      _didIteratorError3 = true;\n      _iteratorError3 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion3 && _iterator3[\"return\"] != null) {\n          _iterator3[\"return\"]();\n        }\n      } finally {\n        if (_didIteratorError3) {\n          throw _iteratorError3;\n        }\n      }\n    }\n  };\n\n  var touchcancel = function touchcancel(event) {\n    var _iteratorNormalCompletion4 = true;\n    var _didIteratorError4 = false;\n    var _iteratorError4 = undefined;\n\n    try {\n      for (var _iterator4 = event.changedTouches[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n        var touch = _step4.value;\n        cancel(touch, contexts[event.identifier]);\n      }\n    } catch (err) {\n      _didIteratorError4 = true;\n      _iteratorError4 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion4 && _iterator4[\"return\"] != null) {\n          _iterator4[\"return\"]();\n        }\n      } finally {\n        if (_didIteratorError4) {\n          throw _iteratorError4;\n        }\n      }\n    }\n  };\n\n  main.addEventListener(\"touchstart\", touchstart);\n  main.addEventListener(\"touchmove\", touchmove);\n  main.addEventListener(\"touchend\", touchend);\n  main.addEventListener(\"touchcancel\", touchcancel);\n}\n\n//# sourceURL=webpack:///./Gesture.js?");

/***/ }),

/***/ "./animation.js":
/*!**********************!*\
  !*** ./animation.js ***!
  \**********************/
/*! exports provided: Timeline, DOMElementStyleElemAnimation */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Timeline\", function() { return Timeline; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DOMElementStyleElemAnimation\", function() { return DOMElementStyleElemAnimation; });\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Timeline =\n/*#__PURE__*/\nfunction () {\n  function Timeline() {\n    _classCallCheck(this, Timeline);\n\n    this._animations = [];\n    this.status = \"inited\";\n    this.pauseDurationTime = 0;\n    this._rate = 1;\n    this._startPoint = 0;\n  }\n\n  _createClass(Timeline, [{\n    key: \"pause\",\n    value: function pause() {\n      if (this.status != \"started\") return;\n      this.status = \"paused\";\n      this._resumeTick = this._tick;\n      this._tick = null;\n      this._pauseStartTime = Date.now();\n    }\n  }, {\n    key: \"resume\",\n    value: function resume() {\n      if (this.status != \"paused\") return;\n      this.pauseDurationTime += Date.now() - this._pauseStartTime;\n      this._tick = this._resumeTick;\n      requestAnimationFrame(this._tick);\n    }\n  }, {\n    key: \"restart\",\n    value: function restart() {\n      var _this = this;\n\n      if (this._tick) {\n        this._tick = null;\n      }\n\n      this._resumeTick = null;\n      this.status = \"inited\";\n      this._animations = [];\n      requestAnimationFrame(function () {\n        return _this.start();\n      });\n    }\n  }, {\n    key: \"start\",\n    value: function start() {\n      var _this2 = this;\n\n      if (this.status == \"started\") return;\n      this.status = \"started\";\n      var startTime = Date.now();\n\n      this._tick = function () {\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = _this2._animations[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var animation = _step.value;\n\n            var tick_value = (Date.now() - _this2.pauseDurationTime - startTime) * _this2._rate + _this2._startPoint;\n\n            animation.tick(tick_value);\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n              _iterator[\"return\"]();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        if (_this2._tick) requestAnimationFrame(_this2._tick);\n      };\n\n      requestAnimationFrame(this._tick);\n    }\n  }, {\n    key: \"addAnimation\",\n    value: function addAnimation(animation) {\n      this._animations.push(animation);\n    }\n  }, {\n    key: \"removeAnimation\",\n    value: function removeAnimation(animation) {}\n  }, {\n    key: \"startPoint\",\n    set: function set(value) {\n      this._startPoint = value;\n    },\n    get: function get() {\n      return this._startPoint;\n    }\n  }, {\n    key: \"rate\",\n    set: function set(value) {\n      this._rate = value;\n    },\n    get: function get() {\n      return this._rate;\n    }\n  }]);\n\n  return Timeline;\n}();\nvar DOMElementStyleElemAnimation =\n/*#__PURE__*/\nfunction () {\n  function DOMElementStyleElemAnimation(element, property, startTime, startValue, endTime, endValue, converter) {\n    _classCallCheck(this, DOMElementStyleElemAnimation);\n\n    this._element = element;\n    this._property = property;\n    this._startTime = startTime;\n    this._startValue = startValue;\n    this._endTime = endTime;\n    this._endValue = endValue;\n    this._converter = converter;\n    this._fixKeyFrame = false;\n  }\n\n  _createClass(DOMElementStyleElemAnimation, [{\n    key: \"tick\",\n    value: function tick(t) {\n      // 这里用 > end < start 来控制还未发生的动画，进行return， 正在进行的就是true， 一旦过了边界，重装为边界，并设定为false\n      if (t > this._endTime) {\n        if (!this._fixKeyFrame) return;else {\n          t = this._endTime;\n          this._fixKeyFrame = false;\n        }\n      } else if (t < this._startTime) {\n        if (!this._fixKeyFrame) return;else {\n          t = this._startTime;\n          this._fixKeyFrame = false;\n        }\n      } else {\n        this._fixKeyFrame = true;\n      } //console.log(\"t, startTime, endTime\" , t, this._startTime, this._endTime);\n      //\n      //let timeProcess = (t - this._startTime) / (this._endTime - this._startTime)\n      //let v = timeProcess *(this._endValue - this._startValue) + this._startValue;\n      //console.log(\"animation transform:\", v);\n      //this._element.style[this._property] = this._converter(ease(timeProcess) *\n      //this._element.style[this._property] = this._converter(timeProcess *\n      //    (this._endValue - this._startValue) +\n      //    this._startValue); // 线性计算时间和位置的关系\n\n\n      var progress = (t - this._startTime) / (this._endTime - this._startTime);\n      var displacement = progress * (this._endValue - this._startValue);\n      var currentValue = this._startValue + displacement;\n      this._element.style[this._property] = this._converter(currentValue);\n    }\n  }]);\n\n  return DOMElementStyleElemAnimation;\n}();\n\nvar DOMElementStyleVectorAnimation =\n/*#__PURE__*/\nfunction () {\n  function DOMElementStyleVectorAnimation(element, property, startTime, startValue, endTime, endValue, converter) {\n    _classCallCheck(this, DOMElementStyleVectorAnimation);\n\n    this._element = element;\n    this._property = property;\n    this._startTime = startTime;\n    this._startValue = startValue;\n    this._endTime = endTime;\n    this._endValue = endValue;\n    this._converter = converter;\n    this._fixKeyFrame = false;\n  }\n\n  _createClass(DOMElementStyleVectorAnimation, [{\n    key: \"tick\",\n    value: function tick(t) {\n      // 这里用 > end < start 来控制还未发生的动画，进行return， 正在进行的就是true， 一旦过了边界，重装为边界，并设定为false\n      if (t > this._endTime) {\n        if (!this._fixKeyFrame) return;else {\n          t = this._endTime;\n          this._fixKeyFrame = false;\n        }\n      } else if (t < this._startTime) {\n        if (!this._fixKeyFrame) return;else {\n          t = this._startTime;\n          this._fixKeyFrame = false;\n        }\n      } else {\n        this._fixKeyFrame = true;\n      }\n\n      var progress = (t - this._startTime) / (this._endTime - this._startTime);\n      var displacement = [];\n      var currentValue = [];\n\n      for (var i = 0; i < this._endValue.length; i++) {\n        displacement[i] = ease(progress) * (this._endValue[i] - this._startValue[i]);\n        currentValue[i] = this._startValue[i] + displacement[i];\n      }\n\n      this._element.style[this._property] = this._converter(currentValue);\n    }\n  }]);\n\n  return DOMElementStyleVectorAnimation;\n}();\n\n//# sourceURL=webpack:///./animation.js?");

/***/ }),

/***/ "./carousel.js":
/*!*********************!*\
  !*** ./carousel.js ***!
  \*********************/
/*! exports provided: Carousel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Carousel\", function() { return Carousel; });\n/* harmony import */ var _animation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./animation.js */ \"./animation.js\");\n/* harmony import */ var _Gesture_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Gesture.js */ \"./Gesture.js\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n//const WIDTH_PROPERTY_SYMBOL = Symbol(\"width\");\n//const WIDTH_ATTRIBUTE_SYMBOL = Symbol(\"width\"); // 虽然名字一样，但是两个symbol不一样\n\n\nvar WIDTH_SYMBOL = Symbol(\"width\");\nvar ATTRIBUTE_SYMBOL = Symbol(\"attribute\");\nvar EVENT_SYMBOL = Symbol(\"event\");\nvar STATE_SYMBOL = Symbol(\"state\");\nvar Carousel =\n/*#__PURE__*/\nfunction () {\n  function Carousel() {\n    _classCallCheck(this, Carousel);\n\n    this[WIDTH_SYMBOL] = Object.create(null); // 不能用{} 避免默认的原型上的一些默认方法和成员\n\n    this[ATTRIBUTE_SYMBOL] = Object.create(null); // 不能用{} 避免默认的原型上的一些默认方法和成员\n\n    this[EVENT_SYMBOL] = Object.create(null);\n    this[STATE_SYMBOL] = Object.create(null);\n  }\n\n  _createClass(Carousel, [{\n    key: \"getAttribute\",\n    value: function getAttribute(name) {\n      return this[ATTRIBUTE_SYMBOL][name];\n    }\n  }, {\n    key: \"setAttribute\",\n    value: function setAttribute(name, value) {\n      return this[ATTRIBUTE_SYMBOL][name] = value;\n    }\n  }, {\n    key: \"addEventListener\",\n    value: function addEventListener(type, listener) {\n      if (!this[EVENT_SYMBOL][type]) {\n        this[EVENT_SYMBOL][type] = new Set();\n      }\n\n      this[EVENT_SYMBOL][type].add(listener);\n    }\n  }, {\n    key: \"removeEventListener\",\n    value: function removeEventListener(type, listener) {\n      if (!this[EVENT_SYMBOL][type]) {\n        return;\n      }\n\n      this[EVENT_SYMBOL][type][\"delete\"](listener);\n    }\n  }, {\n    key: \"triggerEvent\",\n    value: function triggerEvent(type) {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this[EVENT_SYMBOL][type][Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var event = _step.value;\n          event.call(this);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n            _iterator[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"appendTo\",\n    value: function appendTo(element) {\n      this.created();\n      element.appendChild(this._container);\n      this.mounted();\n    }\n  }, {\n    key: \"created\",\n    value: function created() {\n      this._container = document.createElement(\"div\");\n\n      this._container.classList.add(\"carousel\");\n\n      this._handler = null;\n      this.data = this.getAttribute(\"data\"); // 用户初始化实例后，传递图片数据\n\n      console.log(this.data);\n    }\n  }, {\n    key: \"mounted\",\n    value: function mounted() {\n      // 动态创建img标签，填充到container中\n      var i = this.data.length;\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = this.data[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var image = _step2.value;\n          var e = document.createElement(\"img\");\n          e.src = image;\n          e.style.zIndex = i--;\n\n          this._container.appendChild(e);\n        } //使用slice.call方法，将container的子元素平铺为数组\n\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2[\"return\"] != null) {\n            _iterator2[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      var children = Array.prototype.slice.call(this._container.children);\n      var position = 0;\n      var offsetTimeStart = 0;\n      var tl = new _animation_js__WEBPACK_IMPORTED_MODULE_0__[\"Timeline\"]();\n\n      var nextPic = function nextPic() {\n        var nextPosition = position + 1;\n        nextPosition = nextPosition % children.length;\n        var _ref = [children[position], children[nextPosition]],\n            current = _ref[0],\n            next = _ref[1]; // let current = children[position],\n        //    next = children[nextPosition];\n        //\n\n        offsetTimeStart = Date.now(); // next 放到正确的位置，即放到current的后面\n        //next.style.transition = \"ease 0s\";\n        //next.style.transform = `translate(${100 - 100 * nextPosition}%)`; // 第一次，nextPosition=1， value为0， 接着, 2, -100% (左移动一福) ...\n        //console.log(\"next, translate: \", nextPosition, 500 - 500 * nextPosition);\n\n        next.style.transform = \"translate(\".concat(500 - 500 * nextPosition, \"px)\"); // 第一次，nextPosition=1， value为0， 接着, 2, -100% (左移动一福) ...\n\n        console.log(\"current: \", position, current.style.transform);\n        console.log(\"next: \", nextPosition, next.style.transform);\n        console.log(\"\");\n        tl.restart();\n        tl.addAnimation(new _animation_js__WEBPACK_IMPORTED_MODULE_0__[\"DOMElementStyleElemAnimation\"](current, \"transform\", 0, -500 * position, // 使用animation 定义start值\n        1000, -500 - 500 * position, // 定义了end值\n        function (v) {\n          return \"translateX(\".concat(v, \"px)\");\n        }));\n        tl.addAnimation(new _animation_js__WEBPACK_IMPORTED_MODULE_0__[\"DOMElementStyleElemAnimation\"](next, \"transform\", 0, 500 - 500 * nextPosition, // next的start \n        1000, -500 * nextPosition, // 把next挪到 current即可, 左移动即可\n        function (v) {\n          return \"translateX(\".concat(v, \"px)\");\n        }));\n        position = nextPosition;\n        nextPicTimer = setTimeout(nextPic, 3000);\n      };\n\n      var nextPicTimer = setTimeout(nextPic, 3000);\n      var offset = 0; // 这个的作用是，当自动播放的时候，鼠标点下去的一瞬间，其实图片已经左移了，后续pan的时候需要补上这个offset\n\n      this._container.addEventListener(\"mousedown\", function (event) {\n        tl.pause();\n        var currentTime = Date.now();\n\n        if (currentTime - offsetTimeStart < 1000) {\n          // 小于1秒，说明 有pan的操作，否则正常应该是 1000ms\n          offset = 500 - ease((currentTime - offsetTimeStart) / 1000) * 500; // 这个offset是 500 - 移动的部分， 就是pan要补偿的部分\n        } else {\n          offset = 0;\n        }\n\n        console.log(\"offset: \", offset);\n        clearTimeout(nextPicTimer);\n      }); // 使用手势库，重写手动控制的轮播组件\n\n\n      Object(_Gesture_js__WEBPACK_IMPORTED_MODULE_1__[\"enableGesture\"])(this._container);\n\n      this._container.addEventListener(\"pan\", function (event) {\n        console.log(\"pan\");\n        if (event.isVertical) return; // 如果垂直分量大，就不移动\n\n        var current = children[position];\n        var nextPosition = (position + 1) % children.length;\n        var lastPosition = (children.length + position - 1) % children.length; // 避免小数，因此补一个length的block\n\n        var next = children[nextPosition];\n        var last = children[lastPosition];\n        last.style.transition = \"ease 0s\";\n        last.style.transform = \"translate(\".concat(-500 - 500 * lastPosition + event.dx + offset, \"px)\");\n        current.style.transition = \"ease 0s\";\n        current.style.transform = \"translate(\".concat(-500 * position + event.dx + offset, \"px)\");\n        next.style.transition = \"ease 0s\";\n        next.style.transform = \"translate(\".concat(500 - 500 * nextPosition + event.dx + offset, \"px)\");\n        /*\n        for(let child of children) {\n            child.style.transition = \"ease 0s\";\n            child.style.transform = `translateX(${event.dx + x}px)`;\n        }\n        */\n      }); // 改造点一， 使用轮播的思路对手势进行改造\n\n\n      this._container.addEventListener(\"panend\", function (event) {\n        if (event.isVertical) return; // 如果垂直分量大，就不移动\n\n        console.log(\"original postion: \", position);\n        var isLeft; // 这个变量的含义是， 是否是左边的照片进入current\n\n        if (event.isFlick && event.isHorizontal) {\n          if (event.dx > 0) {\n            // 右移动  (之前的写反了) , 鼠标右移， dx 才会 > 0\n            position = position - 1;\n            isLeft = true;\n          }\n\n          if (event.dx < 0) {\n            // 左移动  (之前的写反了)\n            position = position + 1;\n            isLeft = false;\n          }\n        } else {\n          // 如果不是flick, 根据dx的像素是不是超过 1/2 进行判断\n          if (event.dx > 250) {\n            // 右移超过1/2\n            position = position - 1;\n            isLeft = true;\n          } else if (event.dx < -250) {\n            // 左移超过1/2\n            position = position + 1;\n            isLeft = false;\n          } else if (event.dx > 0) {\n            isLeft = false; // 如果右移动只移动的了一点点的举例，其实还是当前抓的照片，恢复到current，则 左边的照片不进入\n          } else {\n            isLeft = true; // 反之, 同上\n          }\n        }\n        /*  使用轮播思路后，这里就不能是边界了，而是循环 0 1 2 3 0 1 2 3 ...\n        position = Math.max(0, Math.min(position, children.length - 1 )); // 依旧处理边界\n        */\n\n\n        position = (children.length + position) % children.length;\n        console.log(\"new postion: \", position); // 三张图轮换显示  last current next\n\n        var current = children[position];\n        var nextPosition = (position + 1) % children.length;\n        var lastPosition = (children.length + position - 1) % children.length; // 避免小数，因此补一个length的block\n\n        var next = children[nextPosition];\n        var last = children[lastPosition];\n        /*\n         *\n         * [0,1,2,3]\n         * 这里的 current 假设为0， last为3 ,next 为1， 那需要图片放到 正确的 last，cur，next位置\n         * 则需要 3 移动到 0 的左边， 即-2000的位置， 而 1 本来就在 0  的右边，则不需要移动\n         *\n         */\n\n        if (!isLeft) {\n          // 如果左边的不进入，则不用进行transition\n          last.style.transition = \"\";\n        } else {\n          last.style.transition = \"ease 0s\";\n        }\n\n        last.style.transform = \"translate(\".concat(-500 - 500 * lastPosition, \"px)\");\n        current.style.transition = \"ease 0s\";\n        current.style.transform = \"translate(\".concat(-500 * position, \"px)\");\n\n        if (isLeft) {\n          // 如果左边进入，则不用进行transition\n          next.style.transition = \"\";\n        } else {\n          next.style.transition = \"ease 0s\";\n        }\n\n        next.style.transform = \"translate(\".concat(500 - 500 * nextPosition, \"px)\");\n        /*\n        for(let child of children) {\n            child.style.transition = \"\";\n            child.style.transform = `translate(${ - position * 500 }px)`; \n        }\n        */\n        //tl.resume();\n      });\n\n      this._container.addEventListener(\"mousedown\", function (event) {\n        return event.preventDefault();\n      });\n\n      this._container.addEventListener(\"pressstart\", function (event) {\n        console.log(\"pressstart\");\n      });\n\n      this._container.addEventListener(\"pressend\", function (event) {\n        console.log(\"pressend\");\n      });\n\n      this._container.addEventListener(\"presscancel\", function (event) {\n        console.log(\"presscancel\");\n      });\n    }\n  }, {\n    key: \"unmounted\",\n    value: function unmounted() {}\n  }, {\n    key: \"update\",\n    value: function update() {}\n  }]);\n\n  return Carousel;\n}();\n\n//# sourceURL=webpack:///./carousel.js?");

/***/ }),

/***/ "./script.js":
/*!*******************!*\
  !*** ./script.js ***!
  \*******************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _carousel_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./carousel.js */ \"./carousel.js\");\n\n\nfunction myCreate(Class, attributes) {\n  var object = new Class();\n\n  for (var name in attributes) {\n    object.setAttribute(name, attributes[name]);\n  }\n\n  return object;\n}\n\nvar images = [\"https://static001.geekbang.org/resource/image/bb/21/bb38fb7c1073eaee1755f81131f11d21.jpg\", \"https://static001.geekbang.org/resource/image/1b/21/1b809d9a2bdf3ecc481322d7c9223c21.jpg\", \"https://static001.geekbang.org/resource/image/b6/4f/b6d65b2f12646a9fd6b8cb2b020d754f.jpg\", \"https://static001.geekbang.org/resource/image/73/e4/730ea9c393def7975deceb48b3eb6fe4.jpg\"];\nvar c = myCreate(_carousel_js__WEBPACK_IMPORTED_MODULE_0__[\"Carousel\"], {\n  data: images\n});\nc.appendTo(document.body);\n\n//# sourceURL=webpack:///./script.js?");

/***/ })

/******/ });